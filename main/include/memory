#ifndef _SSTL_MEMORY_
#define _SSTL_MEMORY_

#include <cstddef>
#include <cstdlib>

#include <new>
#include <utility>
#include <iterator>

namespace std
{
	// this version uses the C memory heap.
	template <class tValue>
	class allocator
	{
	public:
		typedef size_t 		size_type;
		typedef ptrdiff_t 	difference_type;
		typedef tValue		value_type;

		typedef value_type* 		pointer;
		typedef const value_type* 	const_pointer;
		typedef value_type&		reference;
		typedef const value_type&	const_reference;

		template <typename tRebindValue>
		struct rebind
		{
			typedef allocator<tRebindValue> other;
		};

		allocator() throw()
		{}

		allocator<value_type>& operator=(const allocator<value_type> &other) throw()
		{
			return *this;
		}

		pointer allocate(size_type count, void *hint = 0)
		{
			return static_cast<pointer>(operator new(count * sizeof(value_type)));
		}

		void deallocate(pointer ptr, size_type count)
		{
			operator delete(ptr);
		}

		void construct(pointer ptr, const value_type &val)
		{
			new(ptr) value_type(val);
		}

		void destroy(pointer ptr)
		{
			ptr->~value_type();
		}

		size_type max_size() const
		{
			return (size_type(-1) / sizeof(value_type));
		}

		pointer address(reference ref) const
		{
			return &ref;
		}
		const_pointer address(const_reference ref) const
		{
			return &ref;
		}
	};

	template <>
	class allocator<void>
	{
	public:
		typedef void* pointer;
		typedef const void* const_pointer;
		typedef void value_type;

		template <typename tValue>
		struct rebind
		{
			typedef allocator<tValue> other;
		};
	};

	template <typename tValue>
	bool operator==(const allocator<tValue> &x, const allocator<tValue> &y)
	{
		// no state is kept, so no differences between any two allocators of the same type
		return true;
	}

	template <typename tValue>
	bool operator!=(const allocator<tValue> &x, const allocator<tValue> &y)
	{
		return false;
	}

	template <typename tValue>
	class auto_ptr
	{
	private:
		tValue *mPtr;

	public:
		typedef tValue value_type;

		explicit auto_ptr(value_type *ptr = 0) throw()
		 : mPtr(ptr)
		{}
		auto_ptr(auto_ptr &ptr) throw()
		 : mPtr(ptr.release())
		{}
		template <typename tOtherValue>
		auto_ptr(auto_ptr<tOtherValue> &ptr) throw()
		 : mPtr(ptr.release())
		{}

		~auto_ptr() throw()
		{
			delete mPtr; // delete 0 is valid and hurts nothing.
		}

		auto_ptr &operator=(auto_ptr &ptr) throw()
		{
			delete release(); // get rid of the current instance, since it will be replaced.
			mPtr = ptr.release();
			return *this;
		}
		template <typename tOtherValue>
		auto_ptr &operator=(auto_ptr<tOtherValue> &ptr) throw()
		{
			delete release(); // get rid of the current instance
			mPtr = ptr.release();
			return *this;
		}

		value_type &operator*() const throw()
		{
			return *mPtr;
		}
		value_type *operator->() const throw()
		{
			return mPtr;
		}

		value_type *get() const throw()
		{
			return mPtr;
		}
		value_type *release() throw()
		{
			value_type *ptr = mPtr;
			mPtr = 0;
			return ptr;
		}

		template <typename tOtherValue = tValue>
		struct auto_ptr_ref
		{
			auto_ptr<tOtherValue> &mRef;
			
			explicit auto_ptr_ref(auto_ptr<tOtherValue> &ref) throw()
			 : mRef(ref)
			{}
		};

		auto_ptr(auto_ptr_ref<> other) throw()
		{
			mPtr = other.mRef.release();
		}
		auto_ptr &operator=(auto_ptr_ref<> other) throw()
		{
			delete release(); // get rid of the current instance
			mPtr = other.mRef.release();
			return *this;
		}
		template <typename tOtherValue>
		operator auto_ptr_ref<tOtherValue>() throw()
		{
			return auto_ptr_ref<tOtherValue>(*this);
		}
		template <typename tOtherValue>
		operator auto_ptr<tOtherValue>() throw()
		{
			return auto_ptr<tOtherValue>(*this);
		}
	};

	template <typename tIterator, typename tValue>
	class raw_storage_iterator : public iterator<output_iterator_tag, tValue, void, void, tValue &>
	{
	private:
		typedef tIterator iterator_type;
		iterator_type mIterator;

	public:
		explicit raw_storage_iterator(const iterator_type &iterator)
		 : mIterator(iterator)
		{}

		raw_storage_iterator(const raw_storage_iterator &other)
		 : mIterator(other.mIterator)
		{}

		~raw_storage_iterator()
		{}

		operator iterator_type()
		{
			return mIterator;
		}

		raw_storage_iterator &operator*()
		{
			return *this;
		}

		raw_storage_iterator &operator=(const tValue &val)
		{
			typename iterator_traits<iterator_type>::pointer ptr = &*mIterator;
			new(static_cast<void*>(ptr)) typename iterator_traits<iterator_type>::value_type(val);
			mIterator++;
			return *this;
		}
		raw_storage_iterator &operator++()
		{
			return *this;
		}
		raw_storage_iterator operator++(int)
		{
			return *this;
		}
	};

	template <typename tInputIterator, typename tOutputIterator>
	tOutputIterator uninitialized_copy(tInputIterator begin, const tInputIterator &end, tOutputIterator out)
	{
		typedef typename iterator_traits<tOutputIterator>::value_type value_type;

		while (begin != end)
			new (static_cast<void*>(&*out++)) value_type(*begin++);

		return out;
	}

	template <typename tForwardIterator, typename tValue>
	void uninitialized_fill(tForwardIterator begin, const tForwardIterator &end, const tValue &val)
	{
		typedef typename iterator_traits<tForwardIterator>::value_type value_type;

		while (begin != end)
			new (static_cast<void*>(&*begin++)) value_type(val);
	}

	template <typename tForwardIterator, typename tSize, typename tValue>
	void uninitialized_fill_n(tForwardIterator begin, tSize count, const tValue &val)
	{
		typedef typename iterator_traits<tForwardIterator>::value_type value_type;

		for (tSize i = 0; i < count; i++)
			new (static_cast<void*>(&*begin++)) value_type(val);
	}

	template <typename tValue>
	pair<tValue*, ptrdiff_t> get_temporary_buffer(ptrdiff_t count)
	{
		return make_pair(static_cast<tValue*>(operator new(count * sizeof(tValue)), count));
	}

	template <typename tValue>
	void return_temporary_buffer(tValue *ptr)
	{
		operator delete(ptr);
	}
};

// Include the TR1 memory header unless explicitly told not to.
// Note that it should not be necessary to do this, as the classes in the tr1 header are in the std::tr1 namespace.
# if !defined(_SSTL_NO_EXT) && !defined(_SSTL_NO_EXT_MEMORY) && \
    !defined(_SSTL_NO_TR1) && !defined(_SSTL_NO_TR1_MEMORY)
#  include "tr1/memory"

// if we're supposed to include the tr1 extensions into the normal namespace, do so.
#  if defined(_SSTL_USE_TR1)
namespace std {
	using namespace tr1;
}
#  endif
# endif

#endif

